/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package travel.agency.GUI;

import java.awt.Graphics;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import travel.agency.Customer;
import travel.agency.Data.MessageData;
import travel.agency.Message;

/**
 *
 * @author sony
 */
public class ReplyMessages extends java.awt.Dialog {
 public  static Message found=new Message(new Customer("","","","",""),"","dfsdfsdfsds");
    /**
     * Creates new form ReplyMessages
     */
    public ReplyMessages(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane(){ private Image image;
            {
                try {
                    image = ImageIO.read(new File("C:\\Users\\sony\\Desktop\\new5.jpg"));
                } catch (IOException
                    e) {
                    e.printStackTrace();
                }
            }

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.drawImage(image, 0, 0, getWidth(), getHeight(), this);
            }};
            jLabel1 = new javax.swing.JLabel();
            unReadMessages = new javax.swing.JComboBox();
            unReadCounter = new javax.swing.JLabel();
            exit = new javax.swing.JButton();
            text = new javax.swing.JTextField();
            reply = new javax.swing.JTextField();
            l1 = new javax.swing.JLabel();
            l2 = new javax.swing.JLabel();
            show = new javax.swing.JButton();
            sendReply = new javax.swing.JButton();

            addWindowListener(new java.awt.event.WindowAdapter() {
                public void windowClosing(java.awt.event.WindowEvent evt) {
                    closeDialog(evt);
                }
                public void windowOpened(java.awt.event.WindowEvent evt) {
                    formWindowOpened(evt);
                }
            });

            jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/travel/agency/GUI/arman.png"))); // NOI18N
            jLabel1.setText("jLabel1");
            jDesktopPane1.add(jLabel1);
            jLabel1.setBounds(480, 10, 410, 60);

            unReadMessages.addItemListener(new java.awt.event.ItemListener() {
                public void itemStateChanged(java.awt.event.ItemEvent evt) {
                    unReadMessagesItemStateChanged(evt);
                }
            });
            unReadMessages.addHierarchyListener(new java.awt.event.HierarchyListener() {
                public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                    unReadMessagesHierarchyChanged(evt);
                }
            });
            jDesktopPane1.add(unReadMessages);
            unReadMessages.setBounds(530, 170, 330, 40);

            unReadCounter.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
            unReadCounter.setForeground(new java.awt.Color(255, 0, 0));
            unReadCounter.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            jDesktopPane1.add(unReadCounter);
            unReadCounter.setBounds(904, 170, 160, 40);

            exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/travel/agency/GUI/exit-icon.gif"))); // NOI18N
            exit.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    exitActionPerformed(evt);
                }
            });
            jDesktopPane1.add(exit);
            exit.setBounds(1170, 540, 90, 100);

            text.setEditable(false);
            jDesktopPane1.add(text);
            text.setBounds(120, 50, 350, 260);
            jDesktopPane1.add(reply);
            reply.setBounds(120, 430, 350, 250);

            l1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            l1.setForeground(new java.awt.Color(0, 51, 255));
            l1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            l1.setText("message:");
            jDesktopPane1.add(l1);
            l1.setBounds(10, 140, 100, 70);

            l2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
            l2.setForeground(new java.awt.Color(0, 51, 255));
            l2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            l2.setText("reply:");
            jDesktopPane1.add(l2);
            l2.setBounds(10, 500, 100, 70);

            show.setBackground(new java.awt.Color(51, 255, 51));
            show.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
            show.setText("نمایش");
            show.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    showActionPerformed(evt);
                }
            });
            jDesktopPane1.add(show);
            show.setBounds(630, 240, 120, 40);

            sendReply.setBackground(new java.awt.Color(51, 255, 51));
            sendReply.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
            sendReply.setText("ارسال پاسخ");
            sendReply.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    sendReplyActionPerformed(evt);
                }
            });
            jDesktopPane1.add(sendReply);
            sendReply.setBounds(500, 540, 120, 40);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1350, Short.MAX_VALUE)
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE)
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
        System.exit(1);
    }//GEN-LAST:event_closeDialog

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        int counter=MessageData.getInstance().getUnReadMessagesNumber();
        if(counter!=0){
        this.unReadCounter.setText("پیام پاسخ داده نشده"+" "+String.valueOf(counter));
                }
              
              this.text.setVisible(false);
              this.reply.setVisible(false);
              this.l1.setVisible(false);
              this.l2.setVisible(false);
              this.sendReply.setVisible(false);
              refreshComboBox();
    }//GEN-LAST:event_formWindowOpened

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        this.setVisible(false);
        new AdminMenu(null, true).setVisible(true);
    }//GEN-LAST:event_exitActionPerformed

    private void unReadMessagesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_unReadMessagesItemStateChanged
      
    }//GEN-LAST:event_unReadMessagesItemStateChanged

    private void unReadMessagesHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_unReadMessagesHierarchyChanged
       
    }//GEN-LAST:event_unReadMessagesHierarchyChanged

    private void showActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showActionPerformed
        this.l1.setVisible(true);
        this.l2.setVisible(true);
        this.text.setVisible(true);
        this.reply.setVisible(true);
        this.sendReply.setVisible(true);
        ArrayList<Message> messages=MessageData.getInstance().getMessegeList();
        for(Message message:messages){
            if(message.shenas.equals((String)this.unReadMessages.getSelectedItem())){
                this.text.setText(message.getText());
                found=message;
            }
        }
    }//GEN-LAST:event_showActionPerformed

    private void sendReplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendReplyActionPerformed

        int height=HEIGHT-1;
        if(this.reply.equals("")){
            height=JOptionPane.showConfirmDialog(null,"پاسخ خالی هست به هر حال فرستاده شود", null,HEIGHT);
            if(height!=HEIGHT){
                found.setReply("پیام شما خوانده شد");
                found.read=true;
                JOptionPane.showMessageDialog(null,"پاسخ فرستاده شد");
            }
        }  
        else{
            found.setReply(this.reply.getText());
                found.read=true;
                JOptionPane.showMessageDialog(null,"پاسخ فرستاده شد");
        }
        
    }//GEN-LAST:event_sendReplyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ReplyMessages dialog = new ReplyMessages(new java.awt.Frame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    public void refreshComboBox(){
          
        this.unReadMessages.removeAllItems();
        ArrayList<Message>  unReadMessageList;
    unReadMessageList=MessageData.getInstance().getUnReadMessages();
          for (Message message:unReadMessageList) {
            this.unReadMessages.addItem(message.getWriter().getUserName()+"     "+message.getSubject()+"     "+String.valueOf(message.code));
        }
     }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exit;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel l1;
    private javax.swing.JLabel l2;
    private javax.swing.JTextField reply;
    private javax.swing.JButton sendReply;
    private javax.swing.JButton show;
    private javax.swing.JTextField text;
    private javax.swing.JLabel unReadCounter;
    private javax.swing.JComboBox unReadMessages;
    // End of variables declaration//GEN-END:variables
}
